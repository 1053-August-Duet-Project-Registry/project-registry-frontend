# This pipeline does not implement the analysis template from the 
# project-registry-devops repository because there was an issue with
# analysis of an Angular build when checking out multiple repos.

# This pipeline will trigger on commits or pull-requests made to the branch-dev 
# or main branches.  Note that complete static analysis with SonarCloud is only 
# performed on "long-lived" branches, designated as 'main' and any branch name 
# prefixed with 'branch-'.  A minimal analysis is still performed on "short-lived" 
# branches, and a special analysis is performed on pull requests.
trigger:
- branch-dev
- main
pr:
- branch-dev
- main

# These variable groups are required for sonarCloud and Discord secrets to be
# available for analysis tasks
# The contents of these groups that are used here are:
#  project-registry-sonarcloud: stores sonarcloud variables/secrets
#   - sonarKeyPrefix: the common prefix string for the sonar keys in the project
#       (requires a sonarCloud project key)
#   - sonarNamePrefix: the common prefix string for the project names
#   - sonarOrg: the sonar organization
#   - sonarUrlPrefix: the common prefix string for the url for the results
#  project-registry-discord: stores discord variables/secrets
#   - discordAnalysisChannel: the output channel for discord analysis info
#   - discordAnalysisKey: the webhook key associated with the above channel
variables:
# secrets
- group: project-registry-sonarcloud
- group: project-registry-discord

# global
- name: microservice
  value: "frontend"

# analyziz
- name: coveragePath
  value: "./p3-frontend/**"
- name: workDir
  value: "./p3-frontend/"

# docker
- name: imageName
  value: project-registry-frontend
- name: containerRepo
  value: jpbulloch5
- name: containerServiceConnection
  value: 'Jacob''s Docker Hub'
- name: containerUrl
  value: https://hub.docker.com/repository/docker/$jpbulloch5/project-registry-frontend
- name: version
  value: undefined

pool:
  vmImage: ubuntu-latest

stages:
- stage: build
  jobs:
  - job: analysis
    steps:
    - checkout: self

    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'SonarCloud'
        organization: $(sonarOrg)
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: $(sonarKeyPrefix)${{ variables.microservice }}
        cliSources: '${{ variables.workDir }}/src,${{ variables.workDir }}/e2e'
        extraProperties: |
          sonar.coverage.exclusions=**/*.spec.ts,${{ variables.workDir }}/e2e/**/*
          sonar.javascript.lcov.reportPaths=${{ variables.workDir }}/coverage/${{ variables.workDir }}/lcov.info
      displayName: Prepare Analysis for ${{ variables.microservice }} --> Task

    - script: npm ci
      workingDirectory: ${{ variables.workDir }}
      displayName: Install dependencies for ${{ variables.microservice }} --> Task

    - script: npm build --prod
      workingDirectory: ${{ variables.workDir }}
      displayName: Build ${{ variables.microservice }} --> Task
    
    - script: npx ng test --browsers ChromeHeadless --no-watch --code-coverage
      workingDirectory: ${{ variables.workDir }}
      displayName: Test ${{ variables.microservice }} --> Task

    - task: SonarCloudAnalyze@1
      condition: always()
      displayName: Analyze ${{ variables.microservice }} --> Task

    - task: SonarCloudPublish@1
      condition: always()
      inputs:
        pollingTimeoutSec: '300'
      displayName: Publish Analysis of ${{ variables.microservice }} --> Task

    - task: 'ado-discord-webhook@1' # <-- See external requirements note above
      condition: and(always(), ne(variables['Build.Reason'],'PullRequest'))
      inputs:
        channelId: ${{ variables.discordChannel }}
        webhookKey: ${{ variables.discordKey }}
        name: $(System.TeamProject) - Analysis
        avatar: 'https://avatars2.githubusercontent.com/u/39168408?s=460&v=4'
        messageType: 'content'
        content: | 
          **__Analysis Report__**
          **Status:** $(Agent.JobStatus)
          **Branch:** $(Build.SourceBranch)
          **Trigger:** $(Build.Reason)
          **Message:** $(Build.SourceVersionMessage)
          **Report:** <${{ variables.sonarUrlPrefix }}$(Build.SourceBranch)&id=${{ variables.sonarKeyPrefix }}${{ variables.microservice }}>
          **Logs:** <$(System.CollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=logs>
          **Repo:** <$(Build.Repository.Uri)/tree/$(Build.SourceBranchName)>
      displayName: Notification --> Task

    - task: 'ado-discord-webhook@1' # <-- See external requirements note above
      condition: and(always(), eq(variables['Build.Reason'],'PullRequest'))
      inputs:
        channelId: ${{ variables.discordChannel }}
        webhookKey: ${{ variables.discordKey }}
        name: $(System.TeamProject) - PR Analysis
        avatar: 'https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse3.mm.bing.net%2Fth%3Fid%3DOIP.t57fZPkb6fBVhHUXII8DSAHaHa%26pid%3DApi&f=1'
        messageType: 'content'
        content: | 
          **__Analysis Report__**
          **Status:** $(Agent.JobStatus)
          **Report:** <${{ variables.sonarUrlPrefix }}$(Build.SourceBranch)&id=${{ variables.sonarKeyPrefix }}${{ variables.microservice }}>
          **Logs:** <$(System.CollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=logs>
          **Source:** <$(Build.Repository.Uri)/tree/$(System.PullRequest.SourceBranch)>
          **Target:** <$(Build.Repository.Uri)/tree/$(System.PullRequest.TargetBranch)>
          **Pulls:** <$(System.PullRequest.SourceRepositoryURI)/pulls>
      displayName: PR Notification --> Task

    displayName: Analyze frontend --> Job

  displayName: Analyze frontend --> Stage 

- stage: dockerize

  jobs:
  - job: dockerize

    steps:
    - script: |
        # Version key/value should be on its own line
        VERSION=$(cat package.json | grep version | head -1 | awk -F: '{ print $2 }' | sed 's/[",]//g')
        echo found angular package version: $VERSION
        echo "##vso[task.setvariable variable=version]$VERSION"
      workingDirectory: ${{ variables.workDir }}
      displayName: get Angular Package Version --> Task

    - task: Docker@2
      inputs:
        containerRegistry: ${{ variables.containerServiceConnection }}
        repository: '${{ variables.containerRepo }}/${{ variables.imageName }}'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: ${{ variables.version }}
      displayName: Dockerize ${{ variables.imageName }} and push --> Task
    
    - task: ado-discord-webhook@1
      condition: always()
      inputs:
        channelId: $(discordDockerChannel)
        webhookKey: $(discordDockerKey)
        name: '$(System.TeamProject) - Docker'
        avatar: 'https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fcdn3.iconfinder.com%2Fdata%2Ficons%2Flogos-and-brands-adobe%2F512%2F97_Docker-512.png&f=1&nofb=1'
        messageType: 'content'
        content: |
          **__Dockerization Report__**
          **Status:** $(Agent.JobStatus)
          **Branch:** $(Build.SourceBranch)
          **Trigger:** $(Build.Reason)
          **Message:** $(Build.SourceVersionMessage)
          **Image:** ${{ variables.imageName }}:${{ variables.version }}
          **Container Repo:** <${{ variables.containerUrl }}>
          **Logs:** <$(System.CollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=logs>
          **Repo:** <$(Build.Repository.Uri)/tree/$(Build.SourceBranchName)>
      displayName: Notification --> Task

    displayName: Dockerize frontend --> Job
  displayName: Dockerize frontend --> Stage 