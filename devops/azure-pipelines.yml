trigger:
- Dev

pool:
  vmImage: ubuntu-latest

variables:
- group: project-registry-sonarcloud
- group: project-registry-discord
- name: microservice
  value: "frontend"
- name: coveragePath
  value: "src/main/java/com/revature/registry/aspect,src/main/java/com/revature/registry/controller,src/main/java/com/revature/registry/model,src/main/java/com/revature/registry/repository,src/main/java/com/revature/registry/service"
- name: workDir
  value: "./p3-frontend/"
- name: maven
  value: false
- name: angular
  value: true


stages:
- stage: build
  jobs:
  - job: analyze

    steps:
    - checkout: self

    - task: SonarCloudPrepare@1
      enabled: ${{ variables.angular }}
      inputs:
        SonarCloud: "SonarCloud"
        organization: $( variables.sonar-org-name )
        scannerMode: "Other"
        extraProperties: |
          # Additional properties that will be passed to the scanner, 
          # Put one key=value per line, example:
          # sonar.exclusions=**/*.bin
          sonar.projectKey=$( variables.sonar-project-key-prefix )$( variables.microservice )
          sonar.projectName=$( variables.sonar-project-name-prefix )$( variables.microservice )
      displayName: Prepare Analysis for ${{ variables.microservice }} --> Task
          
    - task: Npm@1
      enabled: ${{ variables.angular }}
      inputs:
        command: "install"
        workingDir: "$( variables.workDir )"
      displayName: Install dependencies for ${{ variables.microservice }} --> Task

    - task: SonarCloudAnalyze@1
      enabled: ${{ variables.angular }}
      displayName: Analyze ${{ variables.microservice }} --> Task

    - task: AngularCLI@1
      enabled: ${{ variables.angular }}
      inputs:
        command: "build"
        project: "$( variables.workDir )"
        prod: false
        DisableAnalytics: false
      displayName: Build ${{ variables.microservice }} --> Task

    - task: SonarCloudPrepare@1
      enabled: ${{ variables.maven }}
      inputs:
        SonarCloud: "SonarCloud"
        organization: $( variables.sonar-org-name )
        scannerMode: "Other"
        extraProperties: |
          # Additional properties that will be passed to the scanner, 
          # Put one key=value per line, example:
          # sonar.exclusions=**/*.bin
          sonar.projectKey=$( variables.sonar-project-key-prefix )$( variables.microservice )
          sonar.projectName=$( variables.sonar-project-name-prefix )$( variables.microservice )
      displayName: Prepare Analysis for ${{ variables.microservice }} --> Task

    - task: "Maven@3"
      enabled: ${{ variables.maven }}
      inputs:
        mavenPomFile: ./pom.xml
        publishJUnitresults: true
        testResultsFiles: "**/surefire-reports/TEST-*.xml"
        codeCoverageToolOption: "JaCoCo"
        codeCoverageClassFilesDirectories: $(Agent.BuildDirectory)/$( variables.coveragePath )
        javaHomeOption: "JDKVersion"
        jdkVersionOption: "1.11"
        mavenVersionOption: "Default"
        mavenOptions: "-Xmx3072m"
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        sonarQubeRunAnalysis: true
        sqMavenPluginVersionChoice: "latest"
      displayName: Build/Analyze ${{ variables.microservice }} --> Task

    - task: SonarCloudPublish@1
      inputs:
        pollingTimeoutSec: "300"
      displayName: Publish Analysis of ${{ variables.microservice }} --> Task

    - task: "ado-discord-webhook@1"
      condition: always()
      inputs:
        channelId: $( variables.discord-channel-id )
        webhookKey: $( variables.discord-webhook-key )
        name: "Project Registry"
        messageType: "content"
        content: | 
              __*$( variables.microservice ) Analysis Report*__
              ``` Build Number = $(Build.BuildNumber)
              Report = https://sonarcloud.io/dashboard?branch=$(Build.SourceBranch)&id=$( variables.sonar-project-key-prefix )$( variables.microservice )
              Repo = $(Build.Repository.Name)
              Branch = $(Build.SourceBranch)
              Trigger = $(Build.Reason)
              Status = $(Agent.JobStatus)```
      displayName: Notification --> Task

    displayName: Analyze --> Job
  displayName: Build --> Stage