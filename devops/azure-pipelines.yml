trigger:
- Dev

pool:
  vmImage: ubuntu-latest

variables:
  microservice: tracking-microservice
  coveragePath: src/main/java/com/revature/registry/aspect,controller,model,repository,service

steps:
- checkout: self

- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'SonarCloud'
    organization: '1053-august-duet-project-registry'
    scannerMode: 'CLI'
    configMode: 'manual'
    cliProjectKey: '1053-August-Duet-Project-Registry_project-registry-frontend'
    cliProjectName: 'project-registry-frontend'
    cliProjectVersion: '0.0.1'
    cliSources: './p3-frontend/src/'
    extraProperties: |
      # Additional properties that will be passed to the scanner, 
      # Put one key=value per line, example:
      # sonar.exclusions=**/*.bin
      sonar.projectKey=1053-August-Duet-Project-Registry_project-registry-${{ variables.microservice }}
      sonar.projectName=project-registry-${{ variables.microservice }}
  displayName: Prepare Analysis for ${{ variables.microservice }} --> Task


- task: Npm@1
  inputs:
    command: 'install'
    workingDir: './p3-frontend/'
  displayName: Install dependencies for ${{ variables.microservice }} --> Task

- task: AngularCLI@1
  inputs:
    command: 'build'
    project: './p3-frontend/'
    prod: false
    DisableAnalytics: false
  displayName: Build ${{ variables.microservice }}

- task: SonarCloudPublish@1
  inputs:
    pollingTimeoutSec: '300'
  displayName: Publish Analysis of ${{ variables.microservice }} --> Task

# - task: 'ado-discord-webhook@1'
#   condition: always()
#   inputs:
#     channelId: '856587514218545203'
#     webhookKey: 'OmVq23OAAKWh6VQGfoiFE-DRlGwtDst19OLHedR9HaQ7eONnVdlBJlc1i8OiAUpz4hqd'
#     name: 'Team 1 Project 3 Pipeline'
#     messageType: 'content'
#     content: | 
#           __*Team 2 P2*__  Analysis Report
#           ``` Build Number = $(Build.BuildNumber)
#           Report = https://sonarcloud.io/dashboard?branch=$(Build.SourceBranch)&id=1053-August-Duet-Project-Registry_project-registry-${{ variables.microservice }}
#           Repo = $(Build.Repository.Name)
#           Branch = $(Build.SourceBranch)
#           Trigger = $(Build.Reason)
#           Status = $(Agent.JobStatus)```
#   displayName: Notification --> Task

